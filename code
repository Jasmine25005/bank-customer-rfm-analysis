{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2743905,"sourceType":"datasetVersion","datasetId":1672910}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/jasminemohamed2545/bank-customer-rfm-analysis?scriptVersionId=258783983\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"#Importing libraries\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:35.485229Z","iopub.execute_input":"2025-08-28T20:51:35.485696Z","iopub.status.idle":"2025-08-28T20:51:35.491413Z","shell.execute_reply.started":"2025-08-28T20:51:35.485662Z","shell.execute_reply":"2025-08-28T20:51:35.490424Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load the dataset from the specified file path with proper encoding for special characters\ndata = pd.read_csv(\"/kaggle/input/bank-customer-segmentation/bank_transactions.csv\", encoding = 'ISO-8859-1')\n\ndata.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:35.492881Z","iopub.execute_input":"2025-08-28T20:51:35.493303Z","iopub.status.idle":"2025-08-28T20:51:37.85769Z","shell.execute_reply.started":"2025-08-28T20:51:35.493266Z","shell.execute_reply":"2025-08-28T20:51:37.85682Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Display the dimensions (rows, columns) of the DataFrame\ndata.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:37.859051Z","iopub.execute_input":"2025-08-28T20:51:37.859324Z","iopub.status.idle":"2025-08-28T20:51:37.864632Z","shell.execute_reply.started":"2025-08-28T20:51:37.859304Z","shell.execute_reply":"2025-08-28T20:51:37.863694Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Display information about the DataFrame, such as column types and non-null values\ndata.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:37.865534Z","iopub.execute_input":"2025-08-28T20:51:37.865809Z","iopub.status.idle":"2025-08-28T20:51:38.207688Z","shell.execute_reply.started":"2025-08-28T20:51:37.865779Z","shell.execute_reply":"2025-08-28T20:51:38.20683Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data['CustomerID'] = data['CustomerID'].astype(str)\n\ndata['CustomerID'] = data['CustomerID'].str.replace('C', '')\n\ndata['CustomerID'] = pd.to_numeric(data['CustomerID'])\n\ndata.dropna(subset=['CustomerID'], inplace=True)\n\ndata['CustomerID'] = data['CustomerID'].astype('int64')\n\nprint(data.head())\nprint(data.info())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:38.209803Z","iopub.execute_input":"2025-08-28T20:51:38.210043Z","iopub.status.idle":"2025-08-28T20:51:39.651411Z","shell.execute_reply.started":"2025-08-28T20:51:38.210024Z","shell.execute_reply":"2025-08-28T20:51:39.65066Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Provide a statistical summary of numerical columns\n# Provide a statistical summary of numerical columns without scientific notation\npd.options.display.float_format = '{:.2f}'.format\ndata.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:39.652154Z","iopub.execute_input":"2025-08-28T20:51:39.652365Z","iopub.status.idle":"2025-08-28T20:51:39.840714Z","shell.execute_reply.started":"2025-08-28T20:51:39.652349Z","shell.execute_reply":"2025-08-28T20:51:39.839771Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Filter out rows where 'Quantity' is less than or equal to zero\ndata = data[data[\"TransactionAmount (INR)\"] > 0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:39.841825Z","iopub.execute_input":"2025-08-28T20:51:39.842138Z","iopub.status.idle":"2025-08-28T20:51:39.958225Z","shell.execute_reply.started":"2025-08-28T20:51:39.842111Z","shell.execute_reply":"2025-08-28T20:51:39.957434Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Check if there are any duplicate rows in the DataFrame\ndata.duplicated().any()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:39.959034Z","iopub.execute_input":"2025-08-28T20:51:39.959317Z","iopub.status.idle":"2025-08-28T20:51:40.70843Z","shell.execute_reply.started":"2025-08-28T20:51:39.959285Z","shell.execute_reply":"2025-08-28T20:51:40.707703Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Remove duplicate rows from the DataFrame\ndata.drop_duplicates(inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:40.709363Z","iopub.execute_input":"2025-08-28T20:51:40.709621Z","iopub.status.idle":"2025-08-28T20:51:41.573697Z","shell.execute_reply.started":"2025-08-28T20:51:40.709594Z","shell.execute_reply":"2025-08-28T20:51:41.572811Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:41.574453Z","iopub.execute_input":"2025-08-28T20:51:41.574662Z","iopub.status.idle":"2025-08-28T20:51:41.580344Z","shell.execute_reply.started":"2025-08-28T20:51:41.574646Z","shell.execute_reply":"2025-08-28T20:51:41.579464Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Print the number of unique values in each column of the DataFrame\nprint(data.nunique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:41.583762Z","iopub.execute_input":"2025-08-28T20:51:41.584046Z","iopub.status.idle":"2025-08-28T20:51:42.15316Z","shell.execute_reply.started":"2025-08-28T20:51:41.584028Z","shell.execute_reply":"2025-08-28T20:51:42.15229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create a new DataFrame by selecting only the 'Country' and 'CustomerID' columns, dropping duplicate entries\nfiltered_data = data[[\"CustLocation\",\"CustomerID\"]].drop_duplicates()\nprint(filtered_data.head())\nfiltered_data.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:42.154514Z","iopub.execute_input":"2025-08-28T20:51:42.154947Z","iopub.status.idle":"2025-08-28T20:51:42.431677Z","shell.execute_reply.started":"2025-08-28T20:51:42.154922Z","shell.execute_reply":"2025-08-28T20:51:42.430979Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Top ten country's customer\nfiltered_data.CustLocation.value_counts()[:10].plot(kind='bar')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:42.432457Z","iopub.execute_input":"2025-08-28T20:51:42.432754Z","iopub.status.idle":"2025-08-28T20:51:42.878393Z","shell.execute_reply.started":"2025-08-28T20:51:42.432733Z","shell.execute_reply":"2025-08-28T20:51:42.8775Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Filter the dataset to include only transactions made in MUMBAI\nMUMBAI_data = data[data[\"CustLocation\"] == \"MUMBAI\"]\nMUMBAI_data = data[data[\"CustLocation\"] == \"MUMBAI\"]\n#MUMBAI_data['TransactionDate'] = MUMBAI_data['TransactionDate'].str.strip()# to Ensure all values are clean after i converted them to datetime type in the excel sheet\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:42.879139Z","iopub.execute_input":"2025-08-28T20:51:42.879378Z","iopub.status.idle":"2025-08-28T20:51:43.083368Z","shell.execute_reply.started":"2025-08-28T20:51:42.87936Z","shell.execute_reply":"2025-08-28T20:51:43.082551Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(MUMBAI_data.nunique())\nprint(MUMBAI_data.dtypes) # to check the data type of each column specially the datetime ones as ana la3abt feh ktiir awii lanoh awl ma gah kan 7ba string we 7ba date time we 3amlt kolo shoghl excel we et7wel fe3lan bas kan feh moshkla en el 7roof mesh clean fa nadatataha be el satr eli ta7t dah ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:51:43.084057Z","iopub.execute_input":"2025-08-28T20:51:43.084308Z","iopub.status.idle":"2025-08-28T20:51:43.167156Z","shell.execute_reply.started":"2025-08-28T20:51:43.084283Z","shell.execute_reply":"2025-08-28T20:51:43.166428Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Select relevant columns AND create an explicit copy\nMUMBAI_data = MUMBAI_data[[\"CustomerID\",\"TransactionID\",\"TransactionDate\",\"TransactionAmount (INR)\",\"CustAccountBalance\"]].copy()\n\n# Now, all subsequent operations are safely performed on this new DataFrame\n# Create a new column 'TotalAccountBalance'\nMUMBAI_data[\"TotalAccountBalance\"] = MUMBAI_data[\"TransactionAmount (INR)\"] + MUMBAI_data[\"CustAccountBalance\"]\n\n# Convert 'TransactionDate' column to datetime objects\nMUMBAI_data['TransactionDate'] = pd.to_datetime(MUMBAI_data['TransactionDate'], errors='coerce')\n\nMUMBAI_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:55:33.496671Z","iopub.execute_input":"2025-08-28T20:55:33.497066Z","iopub.status.idle":"2025-08-28T20:55:33.706924Z","shell.execute_reply.started":"2025-08-28T20:55:33.497024Z","shell.execute_reply":"2025-08-28T20:55:33.706011Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Getting the time at the moment\npresent_time = datetime.now()\npresent_time","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:55:37.400127Z","iopub.execute_input":"2025-08-28T20:55:37.400518Z","iopub.status.idle":"2025-08-28T20:55:37.406615Z","shell.execute_reply.started":"2025-08-28T20:55:37.400488Z","shell.execute_reply":"2025-08-28T20:55:37.405709Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"rfm = MUMBAI_data.groupby(\"CustomerID\").agg({\"TransactionDate\":lambda date : (present_time - date.max()).days,\n                                  \"TransactionID\": lambda num : len(num),\n                                  \"TotalAccountBalance\" : lambda price : price.sum()})\nrfm.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:56:09.246555Z","iopub.execute_input":"2025-08-28T20:56:09.246902Z","iopub.status.idle":"2025-08-28T20:56:23.134658Z","shell.execute_reply.started":"2025-08-28T20:56:09.246879Z","shell.execute_reply":"2025-08-28T20:56:23.133919Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Re-naming the columns of the rfm dataframe\nrfm.columns = [\"Recency\", \"Frequency\", \"Monetary\"]\nrfm.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:56:41.884918Z","iopub.execute_input":"2025-08-28T20:56:41.885286Z","iopub.status.idle":"2025-08-28T20:56:41.897845Z","shell.execute_reply.started":"2025-08-28T20:56:41.885243Z","shell.execute_reply":"2025-08-28T20:56:41.896805Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(rfm['Frequency'].nunique())\nprint(rfm['Monetary'].nunique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T20:56:46.025546Z","iopub.execute_input":"2025-08-28T20:56:46.025932Z","iopub.status.idle":"2025-08-28T20:56:46.038387Z","shell.execute_reply.started":"2025-08-28T20:56:46.025899Z","shell.execute_reply":"2025-08-28T20:56:46.037389Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create quartiles for Frequency by first ranking the data\n# method='first' ensures that ties are ranked in the order they appear\nrfm['f_quartile'] = pd.qcut(rfm['Frequency'].rank(method='first'), 4, labels=['4', '3', '2', '1'])\n\n# The rest of your code\nrfm['r_quartile'] = pd.qcut(rfm['Recency'], 4, labels=['1', '2', '3', '4'])\nrfm['m_quartile'] = pd.qcut(rfm['Monetary'], 4, labels=['4', '3', '2', '1'])\n\n\n# Display the head of the DataFrame\nrfm.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T21:01:56.196833Z","iopub.execute_input":"2025-08-28T21:01:56.197177Z","iopub.status.idle":"2025-08-28T21:01:56.24346Z","shell.execute_reply.started":"2025-08-28T21:01:56.197152Z","shell.execute_reply":"2025-08-28T21:01:56.242405Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Combine the quartile rankings into a single RFM score (Recency, Frequency, Monetary)\nrfm[\"RFM_Score\"] = rfm.r_quartile.astype(str) + rfm.f_quartile.astype(str) + rfm.m_quartile.astype(str)\nrfm.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T21:02:35.541283Z","iopub.execute_input":"2025-08-28T21:02:35.542002Z","iopub.status.idle":"2025-08-28T21:02:35.584841Z","shell.execute_reply.started":"2025-08-28T21:02:35.541969Z","shell.execute_reply":"2025-08-28T21:02:35.584198Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Filter customers who have the best RFM score (111) and display the top spenders in descending order of 'Monetary'\nrfm[rfm['RFM_Score']=='111'].sort_values('Monetary',ascending=False).head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T21:02:39.085748Z","iopub.execute_input":"2025-08-28T21:02:39.08608Z","iopub.status.idle":"2025-08-28T21:02:39.110851Z","shell.execute_reply.started":"2025-08-28T21:02:39.086056Z","shell.execute_reply":"2025-08-28T21:02:39.109943Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create RFM segments based on the RFM score\nrfm[\"RFM_Score\"] = rfm['RFM_Score'].astype(int)\nsegment_labels = ['High-Value', 'Mid-Value','Low-Value']\nrfm['Value_Segment'] = pd.qcut(rfm['RFM_Score'], q=3, labels=segment_labels)\nrfm.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T21:02:42.820408Z","iopub.execute_input":"2025-08-28T21:02:42.821165Z","iopub.status.idle":"2025-08-28T21:02:42.852834Z","shell.execute_reply.started":"2025-08-28T21:02:42.82113Z","shell.execute_reply":"2025-08-28T21:02:42.852047Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create the plot\nplt.figure(figsize=(8, 6))  # Set the figure size\nax = rfm.Value_Segment.value_counts().sort_values().plot(kind='bar', color=sns.color_palette('bright', 3))  # Create a bar plot with the 'Value_Segment' column\n\n# Customize the plot\nax.set_title('Value Segment Distribution', fontsize=16)  # Add a title with font size\nax.set_xlabel('Value Segment', fontsize=14)              # Add x-label with font size\nax.set_ylabel('Count', fontsize=14)                       # Add y-label with font size\nax.grid(axis='y', linestyle='--', alpha=0.7)             # Add gridlines for better readability\n\n# Show value annotations on top of the bars\nfor p in ax.patches:\n    ax.annotate(f'{int(p.get_height())}', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12)\n\n# Show the plot\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T21:02:48.730374Z","iopub.execute_input":"2025-08-28T21:02:48.7307Z","iopub.status.idle":"2025-08-28T21:02:48.918602Z","shell.execute_reply.started":"2025-08-28T21:02:48.73066Z","shell.execute_reply":"2025-08-28T21:02:48.917697Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Select relevant columns for correlation\ncolumns_to_plot = ['Recency', 'Frequency', 'Monetary', 'RFM_Score']\ncorrelation_matrix = rfm[columns_to_plot].corr()\n\n# Set the size of the plot\nplt.figure(figsize=(10, 6))\n\n# Create a heatmap using seaborn\nsns.heatmap(correlation_matrix, \n            cmap='coolwarm',  # Color map\n            square=True,  # Make cells square-shaped\n            linewidths=0.5,  # Width of the lines separating cells\n            cbar_kws={\"shrink\": .8},\n            annot=True)  # Show correlation coefficients\n\n# Add title and labels\nplt.title('Correlation Heatmap of RFM Analysis', fontsize=16)\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\nplt.yticks(rotation=0)  # Keep y-axis labels horizontal\n\n# Show the plot\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T21:02:53.009887Z","iopub.execute_input":"2025-08-28T21:02:53.010318Z","iopub.status.idle":"2025-08-28T21:02:53.258111Z","shell.execute_reply.started":"2025-08-28T21:02:53.010287Z","shell.execute_reply":"2025-08-28T21:02:53.257187Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"The strong positive correlation between Recency and RFM_Score suggests that recent customers tend to have higher RFM scores. ","metadata":{}},{"cell_type":"code","source":"# Convert quartile columns to numeric type to calculate the mean\nrfm['r_quartile'] = rfm['r_quartile'].astype(int)\nrfm['f_quartile'] = rfm['f_quartile'].astype(int)\nrfm['m_quartile'] = rfm['m_quartile'].astype(int)\n\n# Calculate the average RFM SCORES (1-4) for each segment\nsegment_scores = rfm.groupby('Value_Segment')[['r_quartile', 'f_quartile', 'm_quartile']].mean().reset_index()\n\n# Create a grouped bar chart to compare segment scores\nfig = go.Figure()\n\n# Add bars for Recency score (using the new r_quartile column)\nfig.add_trace(go.Bar(\n    x=segment_scores['Value_Segment'],\n    y=segment_scores['r_quartile'],\n    name='Recency Score',\n    marker_color='rgb(158,102,225)'\n))\n\n# Add bars for Frequency score (using the new f_quartile column)\nfig.add_trace(go.Bar(\n    x=segment_scores['Value_Segment'],\n    y=segment_scores['f_quartile'],\n    name='Frequency Score',\n    marker_color='rgb(102,158,217)'\n))\n\n# Add bars for Monetary score (using the new m_quartile column)\nfig.add_trace(go.Bar(\n    x=segment_scores['Value_Segment'],\n    y=segment_scores['m_quartile'],\n    name='Monetary Score',\n    marker_color='rgb(50,102,148)'\n))\n\n# Update the layout (No changes here, it's already good)\nfig.update_layout(\n    title='Comparison of RFM Segments based on Recency, Frequency, and Monetary Scores (1-4)',\n    xaxis_title='RFM Segments',\n    yaxis_title='Average Score (1-4)',\n    barmode='group',\n    showlegend=True,\n    width=1000,\n    height=600\n)\n# Show the plot\nfig.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T21:09:22.186019Z","iopub.execute_input":"2025-08-28T21:09:22.186374Z","iopub.status.idle":"2025-08-28T21:09:22.211793Z","shell.execute_reply.started":"2025-08-28T21:09:22.186339Z","shell.execute_reply":"2025-08-28T21:09:22.210695Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"High-Value customers are characterized by high recent purchases, frequent buying behavior, and significant spending, making them essential for the business.\n\nMid-Value customers have moderate engagement but could be potential targets for strategies to convert them into High-Value customers.\n\nLow-Value customers show signs of disengagement, making them a focus for re-engagement strategies to boost their purchasing behavior.","metadata":{}}]}